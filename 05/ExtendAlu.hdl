// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).


// The ExtendAlu chip is an extension of the standard ALU which also supports
// shift operations.
// The inputs of the extended ALU are instruction[9], x[16], y[16].
// The "ng" and "zr" output pins behave the same as in the regular ALU.
// The "out" output is defined as follows:
// If instruction[8]=1 and instruction[7]=1 the output is identical to the 
// regular ALU, where:
// instruction[5]=zx, instruction[4]=nx, ..., instruction[0]=no
// Else, if instruction[8]=0 and instruction[7]=1, the output is a shift:
// - If instruction[4] == 0, the input "y" will be shifted, otherwise "x".
// - If instruction[5] == 0, the shift will be a right-shift, otherwise left.
// - All other inputs are undefined.

CHIP ExtendAlu {
     IN x[16], y[16], instruction[9];
     OUT out[16], zr, ng;
     
     PARTS:
     ShiftRight(in=x,out=xright);
     ShiftRight(in=y,out=yright);
     ShiftLeft(in=x,out=xleft);
     ShiftLeft(in=y,out=yleft);
     Mux4Way16(a = yright, b =xright , c = yleft, d = xleft, sel = instruction[4..5], out =shiftout );
     ALU(x = x, y = y, zx = instruction[5], nx = instruction[4], zy = instruction[3], ny = instruction[2], f = instruction[1], no =instruction[0] , out =ALUout , zr = aluzr, ng = alung);
     Mux16(a =shiftout, b = ALUout, sel = instruction[8], out[0..7]=half1,out[8..15]=half2,out[15]=signal);
     Or8Way(in=half1, out=lsb);
     Or8Way(in=half2,out=msb);
     Or(a=lsb, b=msb, out=notZr);
     Not(in=notZr, out=zr);
     Or(a=signal,b=false,out=ng);
     And16(a=true,b[0..7]=half1,b[8..15]=half2,out=out);
}
