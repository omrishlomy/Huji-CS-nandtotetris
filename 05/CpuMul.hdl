// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

// This chip is an extension of the regular CPU that uses the extended ALU.
// If instruction[15]==0 or (instruction[14]==1 and instruction[13]==1),
// then CpuMul behaves exactly the same as the regular CPU.
// If instruction[15]==1 and instruction[14]==0 the chip will behave as follows:
// | Instruction           | 15 | 14 | 13 | a | c1 | c2 | c3 | c4 | c5 | c6 |
// |-----------------------|:--:|:--:|:--:|:-:|:--:|:--:|:--:|:--:|:--:|:--:|
// | Regular a-instruction |  0 |  * |  * | * |  * |  * |  * |  * |  * |  * |
// | Regular c-instruction |  1 |  1 |  1 | * |  * |  * |  * |  * |  * |  * |
// | dest=A<<;jump         |  1 |  0 |  1 | 0 |  1 |  0 |  0 |  0 |  0 |  0 |
// | dest=D<<;jump         |  1 |  0 |  1 | 0 |  1 |  1 |  0 |  0 |  0 |  0 |
// | dest=M<<;jump         |  1 |  0 |  1 | 1 |  1 |  0 |  0 |  0 |  0 |  0 |
// | dest=A>>;jump         |  1 |  0 |  1 | 0 |  0 |  0 |  0 |  0 |  0 |  0 |
// | dest=D>>;jump         |  1 |  0 |  1 | 0 |  0 |  1 |  0 |  0 |  0 |  0 |
// | dest=M>>;jump         |  1 |  0 |  1 | 1 |  0 |  0 |  0 |  0 |  0 |  0 |
// Where:
// - "<<" is a left shift, and ">>" is a right shift, as defined in project 2.
//   These notations were chosen because they are used in real programming
//   languages.
// - dest and jump can take the same values as in the regular CPU.

CHIP CpuMul {
    IN  
        inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).
    OUT 
        outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction
        
    PARTS:
    //handle A register
    Mux16(a=instruction,b=ALUout,sel=instruction[15],out=Muxoutone);
    Not(in=instruction[15], out=notInst15);
    Or(a=notInst15, b=instruction[5], out=loadA);
    ARegister(in = Muxoutone, load = loadA, out[0..14] =Aout);
    // choose y pin for ALU
    Mux16(a[0..14]=Aout,a[15]=false,b=inM,sel=instruction[12],out=y);
    //extand ALU
    ExtendAlu(x=x,y=y,instruction=instruction[6..14],out=ALUout,zr=zero,ng=negative);
    //handle D register
    And(a=instruction[15], b=instruction[4], out=loadD);
    DRegister(in =ALUout, load = loadD, out = x);

    And(a=instruction[15],b=instruction[3],out=writeM);
    Or16(a[0..14]=Aout, a[15]=false, b=false, out[0..14]=addressM);
    Or16(a=ALUout,b=false,out=outM);
    // Jump conditions 

    And(a=zero, b=instruction[1], out=jeq);          // JEQ if zero
    And(a=negative, b=instruction[2], out=jlt);      // JLT if negative
    Or(a=zero, b=negative, out=zeroOrNeg);
    Not(in=zeroOrNeg, out=positive);
    And(a=positive, b=instruction[0], out=jgt);      // JGT if positive

    // Combine all jump conditions
    Or(a=jeq, b=jlt, out=tmp);
    Or(a=tmp, b=jgt, out=jumpCondition);

    // Only jump in C-instructions
    And(a=instruction[15], b=jumpCondition, out=jump);

    // PC should always increment unless jumping or reset
    PC(in[0..14]=Aout, load=jump, inc=true, reset=reset, out[0..14]=pc);
}
