// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    DMux(in = load, sel = address[5], a =low , b =up );
    DMux(in = up, sel = address[4], a =uplow , b =upup );
    DMux(in = upup, sel = address[3], a =upuplow , b =upupup );
    DMux(in = uplow, sel = address[3], a =uplowlow , b =uplowup );
    DMux(in = low, sel = address[4], a =lowlow , b =lowup );
    DMux(in = lowlow, sel = address[3], a =lowlowlow , b =lowlowup );
    DMux(in = lowup, sel = address[3], a =lowuplow , b =lowupup );
    RAM8(in=in,load=upupup,address=address[0..2],out=out1);
    RAM8(in=in,load=upuplow, address =address[0..2],out=out2);
    RAM8(in =in,load =uplowup,address=address[0..2],out=out3 );
    RAM8(in=in,load=uplowlow,address=address[0..2],out =out4 );
    RAM8(in=in,load=lowupup,address=address[0..2] , out =out5 );
    RAM8(in=in,load=lowuplow,address=address[0..2], out =out6 );
    RAM8(in =in,load=lowlowup,address=address[0..2] , out=out7);
    RAM8(in=in,load=lowlowlow,address=address[0..2] , out=out8);
    Mux8Way16(a=out8,b=out7,c=out6,d=out5,e=out4,f=out3,g=out2,h= out1,sel=address[3..5],out=out);
}